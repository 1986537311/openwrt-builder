#
# 打包晶晨固件,请勿修改文件名称（pack_armvirt.yml）
#

name: 打包晶晨固件
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      amlogic_model:
        description: '输入机型,比如：s905d 或 s905d_s905x2'
        required: true
        default: ''
      amlogic_kernel:
        description: '输入内核,比如：5.10.172 或 5.15.97_6.1.16'
        required: true
        default: ''
      rootfs_size:
        description: '设置rootfs大小(单位：MiB),比如：960'
        required: true
        default: ''
      auto_kernel:
        description: '是否自动检测最新内核'
        required: false
        default: 'true'
        type: boolean
      UPLOAD_FIRMWARE:
        description: '上传固件到 Github Artifacts'
        required: false
        default: 'true'
        type: boolean
      UPLOAD_RELEASE:
        description: '发布固件到 Github Releases'
        required: false
        default: 'true'
        type: boolean
      UPLOAD_WETRANSFER:
        description: '上传固件到 WETRANSFER'
        required: false
        default: 'false'
        type: boolean
  push:
    branches:
      - main
    paths:
      - 'build/Lede/relevance/amstart'

env:
  GITHUB_LINK: https://github.com/${{github.repository}}
  GIT_ACTOR: ${{github.actor}}
  GIT_REPOSITORY: ${{github.repository}}
  RUN_NUMBER: ${{github.run_number}}
  RUN_WORKFLOW: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai

jobs:
  build:
    name: 打包晶晨固件
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:    
    - name: 准备结束
      uses: actions/checkout@v3

    - name: 读取脚本设置
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/281677160/common-main build/common
        chmod -R +x build
        if [[ -f "build/${FOLDER_NAME}/relevance/amlogic.ini" ]]; then
          source build/${FOLDER_NAME}/relevance/amlogic.ini
        fi
        if [[ -n "${{ github.event.inputs.amlogic_model }}" ]]; then
          echo "amlogic_model=${{ github.event.inputs.amlogic_model }}" >> ${GITHUB_ENV}
        else
          echo "amlogic_model=${amlogic_model}" >> ${GITHUB_ENV}
        fi
        if [[ -n "${{ github.event.inputs.amlogic_kernel }}" ]]; then
          echo "amlogic_kernel=${{ github.event.inputs.amlogic_kernel }}" >> ${GITHUB_ENV}
        else
          echo "amlogic_kernel=${amlogic_kernel}" >> ${GITHUB_ENV}
        fi
        if [[ -n "${{ github.event.inputs.rootfs_size }}" ]]; then
          echo "rootfs_size=${{ github.event.inputs.rootfs_size }}" >> ${GITHUB_ENV}
        else
          echo "rootfs_size=${rootfs_size}" >> ${GITHUB_ENV}
        fi
        if [[ -n "${{ github.event.inputs.auto_kernel }}" ]]; then
          echo "auto_kernel=${{ github.event.inputs.auto_kernel }}" >> ${GITHUB_ENV}
        else
          echo "auto_kernel=${auto_kernel}" >> ${GITHUB_ENV}
        fi
        if [[ -n "${{ github.event.inputs.UPLOAD_FIRMWARE }}" ]]; then
          echo "UPLOAD_FIRMWARE=${{ github.event.inputs.UPLOAD_FIRMWARE }}" >> ${GITHUB_ENV}
        else
          echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> ${GITHUB_ENV}
        fi
        if [[ -n "${{ github.event.inputs.UPLOAD_RELEASE }}" ]]; then
          echo "UPLOAD_RELEASE=${{ github.event.inputs.UPLOAD_RELEASE }}" >> ${GITHUB_ENV}
        else
          echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> ${GITHUB_ENV}
        fi
        if [[ -n "${{ github.event.inputs.UPLOAD_WETRANSFER }}" ]]; then
          echo "UPLOAD_WETRANSFER=${{ github.event.inputs.UPLOAD_WETRANSFER }}" >> ${GITHUB_ENV}
        else
          echo "UPLOAD_WETRANSFER=${UPLOAD_WETRANSFER}" >> ${GITHUB_ENV}
        fi
      
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        source ${GITHUB_WORKSPACE}/build/common/common.sh && Diy_update
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: 建立打包文件夹
      working-directory: /workdir
      run: |
        df -hT $PWD
        mkdir -p openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        echo "HOME_PATH=${GITHUB_WORKSPACE}/openwrt" >> ${GITHUB_ENV}
    
    - name: 打包固件
      id: compile
      run: |
        cd ${GITHUB_WORKSPACE}
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cd openwrt
        source build/common/common.sh && Package_amlogic
        echo "date=$(date "+%Y%m%d%H%M%S")" >> ${GITHUB_ENV}
        echo "date_tg=$(date +"%Y年%m月%d日%H时%M分")" >> ${GITHUB_ENV}
         
    - name: 上传固件在 github actions
      if: steps.compile.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: OpenWrt-${{ env.source_codename }}-${{ env.date }}-firmware
        path: ${{ env.FIRMWARE_PATH }}
        
    - name: 发布固件到 Github Releases
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.amlogic_model }} 固件
        tag: a${{ env.date }}
        token: ${{ secrets.REPO_TOKEN }}
        allowUpdates: true
        artifacts: "${{ env.FIRMWARE_PATH }}/*"
        body: |
          发布日期：${{ env.date_tg }}
          源码来源：${{ env.source_codename }}
          
    - name: 上传固件到「WeTransfer」
      if: steps.compile.outcome == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${{ env.FIRMWARE_PATH }} 2>&1 | tee wetransfer.log
        echo "##### WETRANSFER：$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> update_log.txt
        sed -i "s/Download Link/WETRANSFER/g" wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
